---
import type { Props } from '@astrojs/starlight/props';
import type { SidebarEntry, Link } from '@astrojs/starlight/utils/navigation';
import MobileMenuFooter from '@astrojs/starlight/components/MobileMenuFooter.astro';
import SidebarSublist from '@astrojs/starlight/components/SidebarSublist.astro';
import { generateSidebar } from '../utils/sidebarUtils';

const { sidebar } = Astro.props;

const userRole = Astro.cookies.get('userRole')?.value || 'guest';

console.log('components/Sidebar.astro userRole:', userRole);

const dynamicSidebar = generateSidebar(userRole);
console.log('components/Sidebar.astro dynamicSidebar:', dynamicSidebar);
console.log('components/Sidebar.astro Sidebar:', sidebar);

// Convert dynamicSidebar to the format accepted by SidebarSublist
const convertedSidebar: SidebarEntry[] = dynamicSidebar.map(group => ({
  type: 'group',
  label: group.label,
  entries: group.items.map(item => ({
    type: 'link',
    label: item.label,
    href: item.link,
    isCurrent: false,
    badge: undefined,
    attrs: {}
  } as Link)),
  collapsed: false,
  badge: undefined
} as SidebarEntry));

// Fallback in case of undefined
const safeSublist: SidebarEntry[] = convertedSidebar.length > 0 ? convertedSidebar : [{
  type: 'group',
  label: 'Menu',
  entries: [],
  collapsed: false,
  badge: undefined
} as SidebarEntry];
---

<SidebarSublist sublist={safeSublist} />
<div class="md:sl-hidden">
  <MobileMenuFooter {...Astro.props} />
</div>
